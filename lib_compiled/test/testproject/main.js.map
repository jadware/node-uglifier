{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..\\..\\..",
  "sources": [
    "src\\test\\testproject\\main.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,CAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,WAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,CAAA,EAAA,cAAA,EAAA,MAAA,EAAA;;EAAA,IAAA,GAAK,OAAA,CAAQ,kBAAR,CAA2B,CAAC,qBAA5B,CAAA;;EACL,GAAA,GAAI,OAAA,CAAQ,kBAAR,CAA2B,CAAC,qBAA5B,CAAkD,QAAlD;;EAEJ,CAAA,GAAI,OAAA,CAAQ,YAAR;;EACJ,KAAA,GAAQ,OAAA,CAAQ,OAAR;;EACR,CAAA,GAAE,OAAA,CAAQ,kBAAR;;EACF,SAAA,GAAU,OAAA,CAAQ,qBAAR;;EACV,cAAA,GAAe,OAAA,CAAQ,kBAAR;;EACf,MAAA,GAAS,OAAA,CAAQ,QAAR,EART;;;EAUA,UAAA,GAAW,IAAI,OAAJ,CAAY,2BAAZ;;EACX,SAAA,GAAU,IAAI,CAAC,OAAA,CAAQ,kBAAR,CAAD,CAAJ,CAAkC,OAAlC;;EACV,UAAA,GAAW,IAAI,OAAJ,CAAY,mBAAZ;;EAEX,IAAG,GAAA,KAAK,kBAAR;IACI,MAAM,IAAI,KAAJ,CAAU,2BAAA,GAA8B,GAA9B,GAAoC,+BAA9C,EADV;;;EAIA,eAAA,GAAgB;;EAChB,IAAG,MAAM,CAAC,YAAV;IACE,aAAA,GAAc,OAAA,CAAQ,eAAR,EADhB;GAnBA;;;;;;EA2BA,OAAA,GAAQ,SAAS,CAAC,GAAV,CAAc,SAAS,CAAC,GAAV,CAAc,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAA3B,EAAkC,QAAlC,CAAd,EAA0D,QAA1D;;EACR,MAAA,GAAS,MAAM,CAAC,UAAP,CAAkB,MAAlB;;EAET,CAAA,GAAE,MAAM,CAAC,MAAP,CAAc,OAAd,CAAsB,CAAC,MAAvB,CAA8B,KAA9B;;EACF,OAAO,CAAC,GAAR,CAAY,cAAc,CAAC,qBAAf,CAAqC,CAArC,CAAZ;;EAEA,WAAA,GAAY;;EAEZ,IAAG,CAAC,CAAC,CAAC,OAAF,CAAU,cAAc,CAAC,qBAAf,CAAqC,CAArC,CAAV,EAAkD,oDAAlD,CAAJ;IACE,MAAM,IAAI,KAAJ,CAAU,2BAAA,GAA8B,cAAc,CAAC,qBAAf,CAAqC,CAArC,CAA9B,GAAwE,WAAlF,EADR;;;EAGA,IAAG,CAAC,CAAC,CAAC,OAAF,CAAU,UAAU,CAAC,kBAAX,CAA8B,CAA9B,CAAV,EAA2C,UAAU,CAAC,kBAAX,CAA8B,0CAA9B,CAA3C,CAAJ;IACE,MAAM,IAAI,KAAJ,CAAU,2BAAA,GAA8B,CAA9B,GAAkC,WAA5C,EADR;;;EAGA,IAAG,CAAC,CAAC,CAAC,OAAF,CAAU,SAAS,CAAC,GAAV,CAAA,CAAV,EAA0B,OAA1B,CAAJ;IACE,MAAM,IAAI,KAAJ,CAAU,2BAAA,GAA8B,SAAS,CAAC,GAAV,CAAA,CAA9B,GAAgD,kBAA1D,EADR;;;EAGA,IAAG,CAAC,CAAC,CAAC,OAAF,CAAU,CAAC,IAAI,UAAJ,CAAe,OAAf,CAAuB,CAAC,GAAxB,CAAA,CAAD,CAAA,GAAkC,WAA5C,EAAwD,OAAxD,CAAJ;IACE,MAAM,IAAI,KAAJ,CAAU,2BAAA,GAA8B,CAAC,IAAI,UAAJ,CAAe,OAAf,CAAuB,CAAC,GAAxB,CAAA,CAAA,GAAgC,kBAAjC,CAAxC,EADR;;AA5CA",
  "sourcesContent": [
    "fun2=require(\"./rootDependency\").theNonTrivialFunction();\r\nfun=require(\"./rootDependency\").theNonTrivialFunction(\"blabla\");\r\n\r\n_ = require('underscore')\r\nsugar = require('sugar')\r\nC=require(\"./depa/constants\")\r\ncryptoLoc=require(\"./depb/cryptoLoc.js\")\r\nrootDependency=require(\"./rootDependency\")\r\ncrypto\t= require('crypto')\r\n#test it with new as well, same as calling require here\r\ndeepModule=new require('./depb/depDeep/deepModule')\r\nSomeClass=new (require('./depc/SomeClass'))(\"test1\")\r\nSomeClass2=new require('./depc/SomeClass2')\r\n\r\nif fun!=\"ROOT_TEST_blabla\"\r\n    throw new Error(\"ups did not work we got: \" + fun + \"  instead of ROOT_TEST_blabla\")\r\n\r\n\r\ndynamicFileName='./depDynamic/filename_used_in_dynamic_require'\r\nif GLOBAL._loadDynamic\r\n  dynamicImport=require(dynamicFileName)\r\n#  if !_.isEqual(dynamicImport.a,\"test\")\r\n#    throw new Error(\"ups did not work we got: \" + dynamicImport.a + \"  instead test \")\r\n\r\n\r\n\r\n#calculate the sha1 of the encrypted message from constants\r\nmessage=cryptoLoc.dec(cryptoLoc.enc(C.PART_A + C.PART_B,\"secret\"),\"secret\")\r\nshasum = crypto.createHash('sha1')\r\n\r\nr=shasum.update(message).digest(\"hex\")\r\nconsole.log(rootDependency.theNonTrivialFunction(r))\r\n\r\nemptyString=\"\"\r\n\r\nif !_.isEqual(rootDependency.theNonTrivialFunction(r),\"ROOT_TEST_6af9b2faa8ae8e408decd4f7121888af71597a90\")\r\n  throw new Error(\"ups did not work we got: \" + rootDependency.theNonTrivialFunction(r) + \"  instead\")\r\n\r\nif !_.isEqual(deepModule.boothDeepAndShalow(r),deepModule.boothDeepAndShalow(\"6af9b2faa8ae8e408decd4f7121888af71597a90\"))\r\n  throw new Error(\"ups did not work we got: \" + r + \"  instead\")\r\n\r\nif !_.isEqual(SomeClass.get(),\"test1\")\r\n  throw new Error(\"ups did not work we got: \" + SomeClass.get() + \"  instead test1 \")\r\n\r\nif !_.isEqual((new SomeClass2(\"test2\").get()) + emptyString,\"test2\")\r\n  throw new Error(\"ups did not work we got: \" + (new SomeClass2(\"test2\").get() + \"  instead test2 \"))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
  ]
}