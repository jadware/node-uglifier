{
  "version": 3,
  "file": "NodeUglifier.js",
  "sourceRoot": "..",
  "sources": [
    "src\\NodeUglifier.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#\r\n#/*!\r\n# * node-uglifier\r\n# * Copyright (c) 2014 Zsolt Szabo Istvan\r\n# * MIT Licensed\r\n# *\r\n# */\r\n#\r\n\r\nErrors = require(\"./libs/Errors\")\r\nGraph = require(\"./libs/js-graph-mod/src/js-graph\")\r\nfsExtra = require('fs-extra');\r\nfs = require('fs');\r\n_ = require('underscore')\r\nsugar = require('sugar');sugar.extend();\r\npath = require('path')\r\npackageUtils = require('./libs/packageUtils')\r\ncryptoUtils = require('./libs/cryptoUtils')\r\nUglifyJS = require('uglify-es')\r\nutil = require(\"util\")\r\n\r\nsaltLength = 20\r\nUGLIFY_SOURCE_MAP_TOKEN = \"UGLIFY_SOURCE_MAP_TOKEN\"\r\n#default options below\r\n#options={mergeFileFilterWithExport:[],containerName:\"cachedModules\"}\r\n### mergeFileFilterWithExport ###\r\n#if the file has require statements to merged files, than error is thrown, so they should not depend on your merge project files\r\n#path is relative to the main file\r\n#can be directory, than none of the files in it is merged\r\n#if extension is not given than all matching files are included\r\nclass NodeUglifier\r\n    constructor: (mainFile, options = {})->\r\n#defaults\r\n        @options = {\r\n            mergeFileFilterWithExport: [],\r\n            mergeFileFilter: [],\r\n            newFilteredFileDir: \"./lib_external\",\r\n            containerName: \"cachedModules\",\r\n            rngSeed: null,\r\n            licenseFile: null,\r\n            fileExtensions: [\"js\", \"coffee\", \"json\"],\r\n            suppressFilteredDependentError: false,\r\n            packNodeModules:false\r\n        }\r\n        _.extend(@options, options)\r\n\r\n        #if we give full path it should handle it\r\n\r\n        @mainFileAbs = path.resolve(mainFile) || path.resolve(process.cwd(), mainFile)\r\n        #    catch me\r\n        #      debug=1\r\n\r\n        if !fs.existsSync(@mainFileAbs) then throw new Error(\"main file not found \" + @mainFileAbs)\r\n        else\r\n            console.log(\"processing main file: \" + @mainFileAbs)\r\n\r\n        @salt = cryptoUtils.generateSalt(saltLength)\r\n        @hashAlgorithm = \"sha1\"\r\n        @wrappedSourceContainerName = @options.containerName\r\n\r\n        #if we use array module container the array indices shuffled for extra obscurity\r\n        @serialMappings = cryptoUtils.shuffleArray([0..10000], @options.rngSeed)\r\n\r\n        @_sourceCodes = {} #hashes have source,sourceMod,sourceModWrapped\r\n\r\n        @statistics = {}\r\n\r\n        @filteredOutFiles = packageUtils.getMatchingFiles(@mainFileAbs, @options.mergeFileFilter)\r\n\r\n\r\n        @lastResult = null\r\n\r\n\r\n    getSourceContainer: (serial)->\r\n        return @wrappedSourceContainerName + \"[\" + @serialMappings[serial] + \"]\"\r\n\r\n    getRequireSubstitutionForMerge: (serial)->\r\n        return @getSourceContainer(serial) + \".exports\"\r\n\r\n    getNewRelativePathForFilteredWithExport: (pathAbs)=>\r\n        path.join(@options.newFilteredFileDir, path.basename(pathAbs))\r\n\r\n\r\n    getNewRelativePathForFiltered: (pathAbs)=>\r\n        relPath = path.relative(path.dirname(@mainFileAbs), path.dirname(pathAbs))\r\n        path.join(relPath, path.basename(pathAbs))\r\n\r\n    getRequireSubstitutionForFilteredWithExport: (pathAbs, relPathFn)=>\r\n        relFile = relPathFn(pathAbs)\r\n        relFileNoExt = relFile.replace(path.extname(relFile), \"\")\r\n        return \"require('./\" + relFileNoExt.replace(/\\\\/g, \"/\") + \"')\"\r\n\r\n\r\n\r\n\r\n\r\n    addWrapper: (source, serial)->\r\n        modulesArrayStr = @getSourceContainer(serial)\r\n        firstLine = modulesArrayStr + \"={exports:{}};\" + \"\\n\"\r\n        secondLine = \"(function(module,exports) {\"\r\n        lastLine = \"}).call(this,\" + modulesArrayStr + \",\" + modulesArrayStr + \".exports);\"\r\n        return \"\\n\" + firstLine + secondLine + source + lastLine\r\n\r\n\r\n\r\n    merge: ()->\r\n        _this = @\r\n\r\n\r\n        firstLine = \"var \" + @wrappedSourceContainerName + \"=[];\"\r\n        #filteredOutFilesObj:{} has files by basename contains {source,sourceMod,pathRel,serial} #where pathRel is their saved location after exporting relative to the exported main file\r\n        r = {source: firstLine, filteredOutFilesObj: {}, sourceMapModules: {}, pathOrder: [], cycles: []}\r\n        #    graph.addNewVertex('k1', 'oldValue1');\r\n        #    graph.addNewEdge('k5', 'k3');\r\n        depGraph = new Graph();\r\n\r\n\r\n        filteredOutFilesWithExport = packageUtils.getMatchingFiles(@mainFileAbs, @options.mergeFileFilterWithExport)\r\n\r\n\r\n        recursiveSourceGrabber = (filePath)->\r\n            try\r\n                depGraph.addNewVertex(filepath, filepath);\r\n            catch me\r\n#do nothing path vertex exists\r\n\r\n            source = packageUtils.readFile(filePath).toString()\r\n            if _.isEqual(path.extname(filePath), \".json\")\r\n                source = \"module.exports=(\" + source + \");\"\r\n\r\n            #add source and wrapped source\r\n            pathSaltedHash = cryptoUtils.getSaltedHash(filePath, _this.hashAlgorithm, _this.salt)\r\n            if !_this._sourceCodes[pathSaltedHash]?\r\n                _this._sourceCodes[pathSaltedHash] = {\r\n                    source,\r\n                    serial: _.keys(_this._sourceCodes).length,\r\n                    sourceMod: source\r\n                } #wrappedModifiedSource:packageUtils.substituteRequireWrapperFnc(source,pathSaltedHash)\r\n                console.log(filePath + \" added to sources \")\r\n\r\n            #      if !_.isEmpty(filePath.match(\"express.js\"))\r\n            #        a=1+1\r\n\r\n            sourceObj = _this._sourceCodes[pathSaltedHash]\r\n            isSourceObjFilteredWithExport = (filteredOutFilesWithExport.filter((fFile)->return path.normalize(fFile) == path.normalize(filePath)).length > 0)\r\n            isSourceObjFiltered = (_this.filteredOutFiles.filter((fFile)->return path.normalize(fFile) == path.normalize(filePath)).length > 0)\r\n\r\n            ast = packageUtils.getAst(source)\r\n\r\n            requireStatements = packageUtils.getRequireStatements(ast, filePath, _this.fileExtensions,_this.options.packNodeModules)\r\n            #add salted hashes of files\r\n            requireStatements.forEach((o, i)-> requireStatements[i] = _.extend(o,\r\n                {pathSaltedHash: cryptoUtils.getSaltedHash(o.path, _this.hashAlgorithm, _this.salt)}))\r\n\r\n\r\n            for requireStatement in requireStatements\r\n\r\n\r\n                try\r\n                    depGraph.addNewVertex(requireStatement.path, null);\r\n                catch me\r\n#do nothing path vertex exists\r\n                try\r\n                    depGraph.addNewEdge(filePath, requireStatement.path);\r\n                catch me\r\n#do nothing path edge exists\r\n\r\n\r\n                sourceObjDep = _this._sourceCodes[requireStatement.pathSaltedHash]\r\n\r\n                if isSourceObjFilteredWithExport and packageUtils.getIfNonNativeNotFilteredNonNpm(requireStatement.path, filteredOutFilesWithExport,\r\n                    _this.options.fileExtensions)\r\n#filtered out files are not allowed to have dependency on merged fiels\r\n                    msg = \"filtered files can not have dependency on merged files, file: \" + filePath + \" dependency: \" + requireStatement.path\r\n                    if _this.options.suppressFilteredDependentError then console.warn(msg) else throw new Error (msg)\r\n\r\n                if !sourceObjDep?\r\n                    recursiveSourceGrabber(requireStatement.path)\r\n\r\n                sourceObjDep = _this._sourceCodes[requireStatement.pathSaltedHash]\r\n                if !sourceObjDep? then throw new Error(\" internal should not happen 1\")\r\n                otherSerial = sourceObjDep.serial\r\n\r\n                isSourceObjDepFilteredWithExport = (filteredOutFilesWithExport.filter((fFile)->return path.normalize(fFile) == path.normalize(requireStatement.path)).length > 0)\r\n                isSourceObjDepFiltered = (_this.filteredOutFiles.filter((fFile)->return path.normalize(fFile) == path.normalize(requireStatement.path)).length > 0)\r\n\r\n\r\n                if isSourceObjDepFilteredWithExport\r\n#replace with the new path to the filtered out file\r\n                    replacement = _this.getRequireSubstitutionForFilteredWithExport(requireStatement.path, _this.getNewRelativePathForFilteredWithExport)\r\n                else if isSourceObjDepFiltered\r\n                    replacement = _this.getRequireSubstitutionForFilteredWithExport(requireStatement.path, _this.getNewRelativePathForFiltered)\r\n                else\r\n#replace require with wrappedSourceContainerName\r\n                    replacement = _this.getRequireSubstitutionForMerge(otherSerial)\r\n                    r.sourceMapModules[_this.getSourceContainer(otherSerial)] = path.relative(path.dirname(_this.mainFileAbs), requireStatement.path)\r\n\r\n#                if requireStatement.text.indexOf(\"rootDependency\")>-1\r\n#                    a=1\r\n#                    b=2\r\n                sourceObj.sourceMod = packageUtils.replaceRequireStatement(sourceObj.sourceMod, requireStatement.text, replacement)\r\n#                sourceObj.sourceMod = packageUtils.replaceRequireStatement(sourceObj.sourceMod, requireStatement.text, replacement)\r\n#                sourceObj.sourceMod = packageUtils.replaceRequireStatement(sourceObj.sourceMod, requireStatement.text, replacement)\r\n\r\n\r\n            if isSourceObjFilteredWithExport || isSourceObjFiltered\r\n\r\n#no need to wrap filtered out external files\r\n                if isSourceObjFiltered\r\n                    relPathFnc = _this.getNewRelativePathForFiltered\r\n                    basename = relPathFnc(filePath)\r\n                else if isSourceObjFilteredWithExport\r\n                    relPathFnc = _this.getNewRelativePathForFilteredWithExport\r\n                    basename = path.basename(filePath)\r\n\r\n                if r.filteredOutFilesObj[basename]\r\n                    filteredOutFilesObj = r.filteredOutFilesObj[basename]\r\n                    if filteredOutFilesObj.serial != sourceObj.serial then throw new Error (\" external files with same filename not supported yet\")\r\n                else\r\n                    r.filteredOutFilesObj[basename] = {pathRel: relPathFnc(filePath)}\r\n                    _.extend(r.filteredOutFilesObj[basename], sourceObj)\r\n\r\n            else\r\n#add wrapped version\r\n                if sourceObj.serial > 0\r\n                    sourceObj.sourceModWrapped = _this.addWrapper(sourceObj.sourceMod, sourceObj.serial)\r\n                else\r\n                    sourceObj.sourceModWrapped = sourceObj.sourceMod\r\n                r.pathOrder.push(filePath)\r\n                r.source = r.source + sourceObj.sourceModWrapped\r\n\r\n\r\n        recursiveSourceGrabber(@mainFileAbs)\r\n        @lastResult = r\r\n\r\n        #check for cyclic dependencies and throw error listing them\r\n        wasCycle = true\r\n        iter = 0\r\n        while wasCycle and iter < 1000\r\n            iter++\r\n            wasCycle = false\r\n            try\r\n                depGraph.topologically((vertex, vertexVal)->)\r\n            catch me\r\n                wasCycle = true\r\n\r\n                if me.cycle\r\n                    r.cycles.push(me.cycle)\r\n                    edgeToRemove = [me.cycle.last(2).last(), me.cycle.last(2).first()].reverse()\r\n                    depGraph.removeEdge.apply(depGraph, edgeToRemove)\r\n\r\n        if !_.isEmpty(r.cycles) then throw new Errors.CyclicDependencies(r.cycles)\r\n        return this\r\n\r\n#exportDir - the whole dependency structure relative to the project root will be placed here\r\n#srcDirMap - this is an object like {coffee:{src:\"lib_compiled\",etc:blabla}} so if the value is found in a dependency folder than key file extendison file is searched in the key folder\r\n    exportDependencies: (exportDir, srcDirMap = null)->\r\n        sourceFileDidNotExistArr = []\r\n        if !@lastResult then @merge()\r\n        if !@lastResult.pathOrder\r\n            throw new Error(\"there was no dependencies to export\")\r\n            return\r\n        exportDirAbs = path.resolve(exportDir) || path.resolve(process.cwd(), exportDir)\r\n        projectDir = process.cwd()\r\n        #path is used as library\r\n        for p in @lastResult.pathOrder\r\n#find the sub Dirs after root\r\n            if p.indexOf(projectDir) != 0\r\n                throw new Error(\"#{p} dependency not found each dependency should be in the project Dir: #{projectDir}\")\r\n            baseDir = path.dirname(p[projectDir.length + 1..])\r\n            baseName = path.basename(p)\r\n            extension = path.extname(p)\r\n            baseNameNoExtension = baseName[0..(baseName.length - extension.length - 1)]\r\n            #copy file part\r\n            newFile = path.resolve(path.join(exportDirAbs, baseDir, baseName))\r\n            fsExtra.ensureDirSync(path.dirname(newFile))\r\n\r\n            fs.createReadStream(p).pipe(fs.createWriteStream(newFile));\r\n            #      fs.writeFileSync(newFile,p)\r\n            #find corresponding files and copy them too\r\n            if srcDirMap\r\n                for mirrorExt,fromToMap of srcDirMap\r\n                    toFromMap = _.invert(fromToMap)\r\n                    for to,from of toFromMap\r\n                        otherBaseDir = baseDir.replace(to, from)\r\n                        if otherBaseDir == baseDir then continue\r\n                        otherFile = path.join(path.resolve(process.cwd(), otherBaseDir), baseNameNoExtension + \".\" + mirrorExt)\r\n                        baseNameOther = path.basename(otherFile)\r\n                        if fsExtra.existsSync(otherFile)\r\n#file exists do the copy\r\n                            newFileOther = path.resolve(path.join(exportDirAbs, otherBaseDir, baseNameOther))\r\n                            #copy file part\r\n                            fsExtra.ensureDirSync(path.dirname(newFileOther))\r\n\r\n                            fs.createReadStream(otherFile).pipe(fs.createWriteStream(newFileOther));\r\n#              fs.writeFileSync(newFileOther,otherFile)\r\n                        else\r\n                            sourceFileDidNotExistArr.push(otherFile)\r\n                        console.log(otherFile)\r\n        for sourceFileDidNotExist in sourceFileDidNotExistArr\r\n            console.log(\"WARNING source file did not exist: \" + sourceFileDidNotExist)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    toString: ()->\r\n        return @lastResult.source.toString()\r\n\r\n    exportToFile: (file)->\r\n        _this = @\r\n        #write the new merged main file\r\n        outFileAbs = path.resolve(file)\r\n        fsExtra.ensureDirSync(path.dirname(outFileAbs))\r\n        fs.writeFileSync(outFileAbs, @toString())\r\n        outDirRoot = path.dirname(outFileAbs)\r\n        _.keys(_this.lastResult.filteredOutFilesObj).forEach(\r\n            (fileName)->\r\n                copyObj = _this.lastResult.filteredOutFilesObj[fileName]\r\n                newFile = path.resolve(outDirRoot, copyObj.pathRel)\r\n                fsExtra.ensureDirSync(path.dirname(newFile))\r\n                fs.writeFileSync(newFile, copyObj.sourceMod)\r\n        )\r\n        (_this.filteredOutFiles).forEach(\r\n            (fileName)->\r\n                pathRel = _this.getNewRelativePathForFiltered(fileName)\r\n                newFile = path.resolve(outDirRoot, pathRel)\r\n                fsExtra.ensureDirSync(path.dirname(newFile))\r\n                fs.createReadStream(fileName).pipe(fs.createWriteStream(newFile));\r\n        )\r\n\r\n#both uglify and for modules\r\n    exportSourceMaps: (file)->\r\n        _this = @\r\n        outFileAbs = path.resolve(file)\r\n        sourceMapOutFileName = path.basename(outFileAbs) + \".map\"\r\n        sourceMapModulesOutFileName = path.basename(outFileAbs) + \".modules-map\"\r\n        dir = path.dirname(outFileAbs)\r\n        fsExtra.ensureDirSync(dir)\r\n        if @lastResult.sourceMapUglify? then fs.writeFileSync(path.join(dir, sourceMapOutFileName),\r\n            @lastResult.sourceMapUglify.replace(UGLIFY_SOURCE_MAP_TOKEN, sourceMapOutFileName))\r\n        fs.writeFileSync(path.join(dir, sourceMapModulesOutFileName), JSON.stringify(_this.lastResult.sourceMapModules))\r\n\r\n\r\n#pass in standard uglify options objects compress:{},output:null into oprions\r\n    uglify: (optionsIn = {})->\r\n        if !@lastResult then @merge()\r\n\r\n        options = {\r\n            mangle: true,\r\n            compress: {drop_console: false, hoist_funs: true, loops: true, evaluate: true, conditionals: true},\r\n            output: {comments: false},\r\n            strProtectionLvl: 0\r\n        } #, reserved:\"cachedModules\"\r\n        _.extend(options, optionsIn)\r\n        if !@lastResult.source then return\r\n        source = @toString()\r\n        a = 1 + 1\r\n        res = UglifyJS.minify(source, _.extend({fromString: true, outSourceMap: UGLIFY_SOURCE_MAP_TOKEN}, options));\r\n        @lastResult.source = res.code\r\n        @lastResult.sourceMapUglify = res.map\r\n\r\n        switch options.strProtectionLvl\r\n            when 1\r\n                ast = packageUtils.getAst(@lastResult.source)\r\n                @lastResult.source = packageUtils.getSourceHexified(ast)\r\n\r\n\r\n        return this\r\n\r\n\r\nmodule.exports = NodeUglifier\r\n\r\n\r\n#npm publish\r\n#\r\n#uglifyjs test_man_combined.js -c warnings  -m toplevel -r 'require,exports' -o test_man_combined.min.js --source-map test_man_combined.map --screw-ie8\r\n#\r\n#//drop_console=true\r\n#\r\n#process,GLOBAL,require,exports"
  ]
}